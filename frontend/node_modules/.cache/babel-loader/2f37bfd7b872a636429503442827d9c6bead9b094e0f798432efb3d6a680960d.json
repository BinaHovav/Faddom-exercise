{"ast":null,"code":"import React,{useState}from\"react\";import Chart from\"chart.js/auto\";import{CategoryScale}from\"chart.js\";import{Line}from\"react-chartjs-2\";import'./lineChart.scss';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";Chart.register(CategoryScale);export default function LineChart(){const[data,setData]=useState(null);const[timePeriod,setTimePeriod]=useState(\"lastDay\");const[period,setPeriod]=useState(3600);const[ipAddress,setIpAddress]=useState(\"172.31.88.161\");const[loading,setLoading]=useState(false);// Fetching the data based on timePeriod, period, and IP address\nconst fetchData=async()=>{if(!ipAddress)return alert(\"IP Address is required!\");setLoading(true);try{const response=await fetch(`http://localhost:3030/cpu-usage?timePeriod=${timePeriod}&period=${period}&ipAddress=${ipAddress}`);const result=await response.json();console.log(\"Fetched data:\",result);if(Array.isArray(result.metrics)){// Sort the data in ascending order\nconst sortedData=result.metrics.sort((a,b)=>new Date(a.Timestamp)-new Date(b.Timestamp));setData(sortedData);}else{console.error(\"Error: 'metrics' is not an array.\");setData([]);}}catch(error){console.error(\"Error fetching data:\",error);}finally{setLoading(false);}};// Creating the chart data and organizing data according to instructions\nconst chartData={labels:data===null||data===void 0?void 0:data.map(point=>new Date(point.Timestamp).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})),datasets:[{label:\"CPU Usage (%)\",data:data===null||data===void 0?void 0:data.map(point=>point.Average),borderColor:\"rgb(75, 192, 192)\",backgroundColor:\"rgba(75, 192, 192, 0.2)\",borderWidth:2}]};return/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"chart-title\",children:\"CPU Usage Over Time\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Time Period: \"}),/*#__PURE__*/_jsxs(\"select\",{value:timePeriod,onChange:event=>setTimePeriod(event.target.value),className:\"input-select\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"12h\",children:\"12h\"}),/*#__PURE__*/_jsx(\"option\",{value:\"lastDay\",children:\"Last Day\"}),/*#__PURE__*/_jsx(\"option\",{value:\"lastMonth\",children:\"Last Month\"}),/*#__PURE__*/_jsx(\"option\",{value:\"lastYear\",children:\"Last Year\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Period (seconds): \"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:period,onChange:event=>setPeriod(event.target.value),className:\"input-field\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"IP Address: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:ipAddress,onChange:e=>setIpAddress(e.target.value),className:\"input-field\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"button\",{onClick:fetchData,disabled:loading,className:\"load-button\",children:loading?\"Loading...\":\"Load\"})}),/*#__PURE__*/_jsx(\"h2\",{className:\"chart-subtitle\",children:\"Line Chart\"}),data?/*#__PURE__*/_jsx(Line,{data:chartData,options:{elements:{line:{borderJoinStyle:\"round\"}},plugins:{title:{display:true,text:\"CPU Usage Over Time\"},legend:{display:false}}}}):!loading&&/*#__PURE__*/_jsx(\"p\",{children:\"No data to display. Please load data.\"})]});}","map":{"version":3,"names":["React","useState","Chart","CategoryScale","Line","jsx","_jsx","jsxs","_jsxs","register","LineChart","data","setData","timePeriod","setTimePeriod","period","setPeriod","ipAddress","setIpAddress","loading","setLoading","fetchData","alert","response","fetch","result","json","console","log","Array","isArray","metrics","sortedData","sort","a","b","Date","Timestamp","error","chartData","labels","map","point","toLocaleTimeString","hour","minute","datasets","label","Average","borderColor","backgroundColor","borderWidth","className","children","value","onChange","event","target","type","e","onClick","disabled","options","elements","line","borderJoinStyle","plugins","title","display","text","legend"],"sources":["/Users/binahovav/Desktop/faddom-exercise/frontend/src/components/LineChart/lineChart.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { CategoryScale } from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport './lineChart.scss';\n\n\nChart.register(CategoryScale);\n\nexport default function LineChart() {\n  const [data, setData] = useState(null);\n  const [timePeriod, setTimePeriod] = useState(\"lastDay\"); \n  const [period, setPeriod] = useState(3600); \n  const [ipAddress, setIpAddress] = useState(\"172.31.88.161\"); \n  const [loading, setLoading] = useState(false); \n\n  // Fetching the data based on timePeriod, period, and IP address\n  const fetchData = async () => {\n    if (!ipAddress) return alert(\"IP Address is required!\");\n\n    setLoading(true); \n\n    try {\n      const response = await fetch(\n        `http://localhost:3030/cpu-usage?timePeriod=${timePeriod}&period=${period}&ipAddress=${ipAddress}`\n      );\n      const result = await response.json();\n      console.log(\"Fetched data:\", result); \n\n      if (Array.isArray(result.metrics)) {\n        // Sort the data in ascending order\n        const sortedData = result.metrics.sort(\n          (a, b) => new Date(a.Timestamp) - new Date(b.Timestamp)\n        );\n        setData(sortedData); \n      } else {\n        console.error(\"Error: 'metrics' is not an array.\");\n        setData([]); \n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    } finally {\n      setLoading(false); \n    }\n  };\n  \n\n  // Creating the chart data and organizing data according to instructions\n  const chartData = {\n    labels: data?.map((point) =>\n      new Date(point.Timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    ),\n        datasets: [\n      {\n        label: \"CPU Usage (%)\",\n        data: data?.map((point) => point.Average), \n        borderColor: \"rgb(75, 192, 192)\",\n        backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  return (\n<div className=\"chart-container\">\n  <h1 className=\"chart-title\">CPU Usage Over Time</h1>\n\n  {/* Time period selection */}\n  <div className=\"input-group\">\n    <label className=\"input-label\">Time Period: </label>\n    <select\n      value={timePeriod}\n      onChange={(event) => setTimePeriod(event.target.value)}\n      className=\"input-select\"\n    >\n      <option value=\"12h\">12h</option>\n      <option value=\"lastDay\">Last Day</option>\n      <option value=\"lastMonth\">Last Month</option>\n      <option value=\"lastYear\">Last Year</option>\n    </select>\n  </div>\n\n  {/* Period input (in seconds) */}\n  <div className=\"input-group\">\n    <label className=\"input-label\">Period (seconds): </label>\n    <input\n      type=\"number\"\n      value={period}\n      onChange={(event) => setPeriod(event.target.value)}\n      className=\"input-field\"\n    />\n  </div>\n\n  {/* IP address input */}\n  <div className=\"input-group\">\n    <label className=\"input-label\">IP Address: </label>\n    <input\n      type=\"text\"\n      value={ipAddress}\n      onChange={(e) => setIpAddress(e.target.value)}\n      className=\"input-field\"\n    />\n  </div>\n\n  {/* Load button */}\n  <div className=\"button-container\">\n    <button onClick={fetchData} disabled={loading} className=\"load-button\">\n      {loading ? \"Loading...\" : \"Load\"}\n    </button>\n  </div>\n\n  {/* The chart from chartjs library */}\n\n  <h2 className=\"chart-subtitle\">Line Chart</h2>\n  {data ? (\n    <Line\n      data={chartData}\n      options={{\n        elements: {\n          line: {\n            borderJoinStyle: \"round\",\n          },\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: \"CPU Usage Over Time\",\n          },\n          legend: {\n            display: false,\n          },\n        },\n      }}\n    />\n  ) : (\n    !loading && <p>No data to display. Please load data.</p>\n  )}\n</div>\n\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}